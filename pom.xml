<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.sselab.springboot</groupId>
  <artifactId>book</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>book</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <mysql.connector.version>6.0.3</mysql.connector.version>
    <mybatis.version>3.4.1</mybatis.version>
    <mybatis.spring.boot.version>1.1.1</mybatis.spring.boot.version>
    <tk.mybatis.version>3.3.7</tk.mybatis.version>
    <pagehelper.version>4.1.6</pagehelper.version>
  </properties>
  
  <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.1.RELEASE</version>
    </parent>
  

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!--Mybatis-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis.spring.boot.version}</version>
        </dependency>
    <!--Mysql / DataSource-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.connector.version}</version>
        </dependency>        
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper</artifactId>
            <version>${tk.mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>${pagehelper.version}</version>
        </dependency>
<<<<<<< HEAD
      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-hystrix</artifactId>
          <version>1.1.0.RELEASE</version>
      </dependency>
=======
        
>>>>>>> 6f64580510aed55294331e486941071fb53ffd72
  </dependencies>
  
  <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
 <!--
            此配置相当于在
            经过 mvn package后自动
            将dockerDirectory目录下的内容（这里只有Dockerfile）拷贝到项目的/target/docker/文件夹下
            将resource中的include下的文件（这里就是${project.build.finalName}.jar）拷贝到/target/docker/文件夹下
            然后在/target/docker/目录下 执行 docker build -t sselab/book Dockerfile 操作
        -->
        <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.3.258</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>build</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <imageName><!-- ${docker.registry} -->sselab/${project.artifactId}</imageName>
                <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
               <!-- <pushImage>true</pushImage> -->
                <resources>
                    <resource>
                        <targetPath>/</targetPath>
                        <!-- ${project.build.directory},项目构建输出目录，默认为target/ -->
                        <directory>${project.build.directory}</directory>
                        <!-- 可以设置要包含进来的文件格式 比如 **/* 代表所有文件 ${project.build.directory},打包出来的jar名称，默认为${project.artifactId}-${project.version} -->
                        <include>${project.build.finalName}.jar</include>
                    </resource>
                </resources>
            </configuration>
        </plugin>
        </plugins>
    </build>
</project>

